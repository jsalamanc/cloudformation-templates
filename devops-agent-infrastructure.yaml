AWSTemplateFormatVersion: '2010-09-09'
Description: 'Infraestructura para agente DevOps espelializado en AWS - Bucket S3, OpenSearch y Bedrock'

Parameters:
  ProjectName:
    Type: String
    Default: devops-agent
    Description: Nombre del proyecto para nombrar recursos
  
  Environment:
    Type: String
    Default: dev
    AllowedValues: [dev, staging, prod]
    Description: Ambiente de despliegue

  EmbeddingModel:
    Type: String
    Default: amazon.titan-embed-text-v2:0
    AllowedValues: 
      - amazon.titan-embed-text-v1
      - amazon.titan-embed-text-v2:0
      - cohere.embed-english-v3
      - cohere.embed-multilingual-v3
    Description: Modelo de embeddings para la base de conocimiento

  AntropicClaudeKaiku:
    Type: String
    Default: arn:aws:bedrock:us-east-1::foundation-model/anthropic.claude-3-5-haiku-20241022-v1:0
    Description: Nombre del proyecto para nombrar recursos

  LambdaArtifactBucketName:
    Type: String
    Default: lambda-artifacts-functions
    Description: Bucket de almacenamiento de artefactos de lambdas
Resources:
  # 1. Rol IAM para la función Lambda de sincronización S3
  LambdaSyncS3ToKnowledgeRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: 'lambda.amazonaws.com'
            Action: 'sts:AssumeRole'
      Policies:
        - PolicyName: LambdaCloudWatchLogsPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource: 'arn:aws:logs:*:*:*'

  # 2. Función Lambda para sincronizar S3 con base de conocimiento
  LambdaSyncS3ToKnowledge:
    Type: AWS::Lambda::Function
    DependsOn:
      - LambdaSyncS3ToKnowledgeRole
    Properties:
      FunctionName: !Sub '${ProjectName}-${Environment}-sync-knowledge'
      Runtime: python3.11
      Handler: sync_s3_knowledge.handler
      Role: !GetAtt LambdaSyncS3ToKnowledgeRole.Arn
      Timeout: 900
      Code:
        S3Bucket: !Ref LambdaArtifactBucketName
        S3Key: sync_s3_knowledge.zip
      Environment:
        Variables:
          REGION: !Ref AWS::Region

  # 3. Permiso para que S3 invoque la función Lambda
  S3InvokeLambdaPermission:
    Type: AWS::Lambda::Permission
    DependsOn: LambdaSyncS3ToKnowledge
    Properties:
      FunctionName: !Ref LambdaSyncS3ToKnowledge
      Action: lambda:InvokeFunction
      Principal: s3.amazonaws.com
      SourceArn: !Sub 'arn:aws:s3:::${ProjectName}-${Environment}-files-${AWS::AccountId}'

  # 4. Bucket S3 para archivos del agente DevOps
  DevOpsAgentBucket:
    Type: AWS::S3::Bucket
    DependsOn: S3InvokeLambdaPermission
    Properties:
      BucketName: !Sub '${ProjectName}-${Environment}-files-${AWS::AccountId}'
      VersioningConfiguration:
        Status: Enabled
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      NotificationConfiguration:
        LambdaConfigurations:
          - Event: s3:ObjectCreated:*
            Function: !GetAtt LambdaSyncS3ToKnowledge.Arn

  # 5. Política de encriptación para OpenSearch Serverless
  EncryptionPolicy:
    Type: AWS::OpenSearchServerless::SecurityPolicy
    DependsOn: DevOpsAgentBucket
    Properties:
      Name: !Sub '${ProjectName}-${Environment}-encryption'
      Type: encryption
      Policy: !Sub |
        {
          "Rules": [
            {
              "ResourceType": "collection",
              "Resource": ["collection/${ProjectName}-${Environment}-vectors"]
            }
          ],
          "AWSOwnedKey": true
        }

  # 6. Política de red para OpenSearch Serverless
  NetworkPolicy:
    Type: AWS::OpenSearchServerless::SecurityPolicy
    DependsOn: EncryptionPolicy
    Properties:
      Name: !Sub '${ProjectName}-${Environment}-network-policy'
      Type: network
      Policy: !Sub |
        [
          {
            "Rules": [
              {
                "ResourceType": "collection",
                "Resource": ["collection/${ProjectName}-${Environment}-vectors"]
              },
              {
                "ResourceType": "dashboard",
                "Resource": ["collection/${ProjectName}-${Environment}-vectors"]
              }
            ],
            "AllowFromPublic": true
          }
        ]

  # 7. Política de acceso para OpenSearch Serverless
  AccessPolicy:
    Type: AWS::OpenSearchServerless::AccessPolicy
    DependsOn: 
      - NetworkPolicy
      - IndexCreatorLambdaRole
    Properties:
      Name: !Sub '${ProjectName}-${Environment}-access-policy'
      Type: data
      Policy: !Sub |
        [
          {
            "Rules": [
              {
                "ResourceType": "collection",
                "Resource": ["collection/${ProjectName}-${Environment}-vectors"],
                "Permission": [
                  "aoss:CreateCollectionItems",
                  "aoss:DeleteCollectionItems",
                  "aoss:UpdateCollectionItems",
                  "aoss:DescribeCollectionItems"
                ]
              },
              {
                "ResourceType": "index",
                "Resource": ["index/${ProjectName}-${Environment}-vectors/*"],
                "Permission": [
                  "aoss:CreateIndex",
                  "aoss:DeleteIndex",
                  "aoss:UpdateIndex",
                  "aoss:DescribeIndex",
                  "aoss:ReadDocument",
                  "aoss:WriteDocument"
                ]
              }
            ],
            "Principal": [
              "arn:aws:iam::${AWS::AccountId}:root",
              "arn:aws:iam::${AWS::AccountId}:user/admin",
              "${IndexCreatorLambdaRole.Arn}"
            ]
          }
        ]

  # 8. Rol IAM para la función Lambda de creación de índices
  IndexCreatorLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${ProjectName}-${Environment}-index-creator-role'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: OpenSearchServerlessAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - aoss:APIAccessAll
                Resource: '*'

  # 9. Lambda Layer para dependencias
  LambdaLayer:
    Type: AWS::Lambda::LayerVersion
    Properties:
      LayerName: !Sub '${ProjectName}-${Environment}-dependencies'
      Description: 'Layer con opensearch-py y cfnresponse'
      Content:
        S3Bucket: layer-artifacts-lambdas
        S3Key: my_dependencies_layer.zip
      CompatibleRuntimes:
        - python3.9
        - python3.10
        - python3.11

  # 10. Colección vectorial OpenSearch Serverless
  VectorCollection:
    Type: AWS::OpenSearchServerless::Collection
    DependsOn:
      - EncryptionPolicy
      - NetworkPolicy
      - AccessPolicy
    Properties:
      Name: !Sub '${ProjectName}-${Environment}-vectors'
      Description: 'Colección vectorial para agente DevOps'
      Type: VECTORSEARCH
      StandbyReplicas: 'DISABLED'

  # 11. Función Lambda para crear el índice
  IndexCreatorLambda:
    Type: AWS::Lambda::Function
    DependsOn:
      - VectorCollection
      - IndexCreatorLambdaRole
      - LambdaLayer
    Properties:
      FunctionName: !Sub '${ProjectName}-${Environment}-index-creator'
      Runtime: python3.11
      Handler: create_index_handler.lambda_handler
      Role: !GetAtt IndexCreatorLambdaRole.Arn
      Timeout: 900
      Code:
        S3Bucket: !Ref LambdaArtifactBucketName
        S3Key: create_index_handler.zip
      Layers:
        - !Ref LambdaLayer
      Environment:
        Variables:
          REGION: !Ref AWS::Region

  # 12. Permiso para que CloudFormation invoque la función Lambda
  LambdaInvokePermission:
    Type: AWS::Lambda::Permission
    DependsOn: IndexCreatorLambda
    Properties:
      FunctionName: !Ref IndexCreatorLambda
      Action: lambda:InvokeFunction
      Principal: cloudformation.amazonaws.com

  # 13. Custom Resource para invocar y crear el índice vectorial
  VectorIndex:
    Type: AWS::CloudFormation::CustomResource
    DependsOn: 
      - VectorCollection
      - AccessPolicy
      - LambdaInvokePermission
    Properties:
      ServiceToken: !GetAtt IndexCreatorLambda.Arn
      CollectionEndpoint: !GetAtt VectorCollection.CollectionEndpoint
      VectorIndexName: devops-vectors

  # 14. Rol de servicio para Bedrock Knowledge Base
  BedrockKnowledgeBaseRole:
    Type: AWS::IAM::Role
    DependsOn: VectorIndex
    Properties:
      RoleName: !Sub '${ProjectName}-${Environment}-bedrock-kb-role'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: bedrock.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: S3DataSourceAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:ListBucket
                Resource:
                  - !GetAtt DevOpsAgentBucket.Arn
                  - !Sub '${DevOpsAgentBucket.Arn}/*'
        - PolicyName: OpenSearchServerlessAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - aoss:APIAccessAll
                Resource: !GetAtt VectorCollection.Arn
        - PolicyName: BedrockModelAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - bedrock:InvokeModel
                Resource: !Sub 'arn:aws:bedrock:${AWS::Region}::foundation-model/${EmbeddingModel}'

  # 15. Base de conocimiento de Bedrock
  BedrockKnowledgeBase:
    Type: AWS::Bedrock::KnowledgeBase
    DependsOn: 
      - BedrockKnowledgeBaseRole
      - VectorIndex
      - BedrockKnowledgeBaseRole
      - DevOpsAgentBucket

    Properties:
      Name: !Sub '${ProjectName}-${Environment}-knowledge-base'
      Description: 'Base de conocimiento DevOps con sincronización S3-OpenSearch'
      RoleArn: !GetAtt BedrockKnowledgeBaseRole.Arn
      KnowledgeBaseConfiguration:
        Type: VECTOR
        VectorKnowledgeBaseConfiguration:
          EmbeddingModelArn: !Sub 'arn:aws:bedrock:${AWS::Region}::foundation-model/${EmbeddingModel}'
      StorageConfiguration:
        Type: OPENSEARCH_SERVERLESS
        OpensearchServerlessConfiguration:
          CollectionArn: !GetAtt VectorCollection.Arn
          VectorIndexName: 'devops-vectors'
          FieldMapping:
            VectorField: 'bedrock-knowledge-base-default-vector-devops'
            TextField: 'AMAZON_BEDROCK_TEXT_CHUNK'
            MetadataField: 'AMAZON_BEDROCK_METADATA'

  # 16. Fuente de datos S3 para la base de conocimiento
  BedrockDataSource:
    Type: AWS::Bedrock::DataSource
    Properties:
      Name: !Sub '${ProjectName}-${Environment}-s3-datasource'
      Description: 'Fuente de datos S3 para documentos DevOps'
      KnowledgeBaseId: !Ref BedrockKnowledgeBase
      DataSourceConfiguration:
        Type: S3
        S3Configuration:
          BucketArn: !GetAtt DevOpsAgentBucket.Arn
      VectorIngestionConfiguration:
        ChunkingConfiguration:
          ChunkingStrategy: FIXED_SIZE
          FixedSizeChunkingConfiguration:
            MaxTokens: 512
            OverlapPercentage: 20

  # 17. Rol IAM para el agente DevOps
  DevOpsAgentRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${ProjectName}-${Environment}-agent-role'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: 
                - ec2.amazonaws.com
                - lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: S3Access
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                  - s3:DeleteObject
                  - s3:ListBucket
                Resource:
                  - !GetAtt DevOpsAgentBucket.Arn
                  - !Sub '${DevOpsAgentBucket.Arn}/*'
        - PolicyName: OpenSearchServerlessAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - aoss:APIAccessAll
                Resource: !GetAtt VectorCollection.Arn
        - PolicyName: BedrockAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - bedrock:Retrieve
                  - bedrock:RetrieveAndGenerate
                  - bedrock:InvokeModel
                Resource:
                  - !Sub 'arn:aws:bedrock:${AWS::Region}:${AWS::AccountId}:knowledge-base/${BedrockKnowledgeBase}'
                  - !Sub 'arn:aws:bedrock:${AWS::Region}::foundation-model/*'

  # 18. Guadrial configured to agents
  GuardrialBedrockAgents:
    Type: AWS::Bedrock::Guardrail
    DependsOn:
      - BedrockKnowledgeBase
      - BedrockDataSource
    Properties:
      Name: !Sub '${ProjectName}-${Environment}-guardrail'
      Description: Guardrail para agente DevOps especializado en AWS
      BlockedInputMessaging: Esta consulta no está permitida. Como agente DevOps, solo puedo ayudarte con temas relacionados a AWS y DevOps.
      BlockedOutputsMessaging: La respuesta generada no cumple con las políticas establecidas. Por favor, reformula tu pregunta enfocándote en DevOps.
      ContentPolicyConfig:
        FiltersConfig:
          - Type: SEXUAL
            InputStrength: HIGH
            OutputStrength: HIGH
          - Type: VIOLENCE
            InputStrength: HIGH
            OutputStrength: HIGH
          - Type: HATE
            InputStrength: HIGH
            OutputStrength: HIGH
          - Type: INSULTS
            InputStrength: MEDIUM
            OutputStrength: MEDIUM
      TopicPolicyConfig:
        TopicsConfig:
          - Name: NonDevOpsTopics
            Definition: Temas no relacionados con DevOps, AWS, infraestructura, CI/CD o automatización
            Examples:
              - Recetas de cocina
              - Consejos de salud
              - Entretenimiento
            Type: DENY
      WordPolicyConfig:
        WordsConfig:
          - Text: password
          - Text: secret
          - Text: token
        ManagedWordListsConfig:
          - Type: PROFANITY

  # 19. Agente Bedrok para interactuar con las bases de conocimiento
  DevOpsAgentBedrock:
    Type: AWS::Bedrock::Agent
    DependsOn:
      - GuardrialBedrockAgents
    Properties:
      AgentName: DevOpsAgentBedrock
      AgentResourceRoleArn: !GetAtt DevOpsAgentRole.Arn
      AutoPrepare: true
      Description: agente especializdo en devops con aws
      FoundationModel: !Ref AntropicClaudeKaiku
      GuardrailConfiguration:
        GuardrailIdentifier: !Ref GuardrialBedrockAgents
        GuardrailVersion: DRAFT
      IdleSessionTTLInSeconds: 900
      Instruction: te llamaras Camilo, eres un agente especializado en devops con aws y tecnologias aws. si el usuario te hace pregutnas relacionada con devops, apoyate en la base de conocimientos para nutrirte de informacion para generar respuestas
      KnowledgeBases:
        - KnowledgeBaseId: !Ref BedrockKnowledgeBase
          Description: Base de conocimiento DevOps con documentación técnica de aws
          KnowledgeBaseState: ENABLED
      MemoryConfiguration:
        EnabledMemoryTypes: 
          - SESSION_SUMMARY
        StorageDays: 30
Outputs:
  S3BucketName:
    Description: 'Nombre del bucket S3 para archivos'
    Value: !Ref DevOpsAgentBucket
    Export:
      Name: !Sub '${ProjectName}-${Environment}-bucket-name'

  S3BucketArn:
    Description: 'ARN del bucket S3'
    Value: !GetAtt DevOpsAgentBucket.Arn
    Export:
      Name: !Sub '${ProjectName}-${Environment}-bucket-arn'

  VectorCollectionEndpoint:
    Description: 'Endpoint de la colección vectorial OpenSearch Serverless'
    Value: !GetAtt VectorCollection.CollectionEndpoint
    Export:
      Name: !Sub '${ProjectName}-${Environment}-collection-endpoint'

  VectorCollectionArn:
    Description: 'ARN de la colección vectorial'
    Value: !GetAtt VectorCollection.Arn
    Export:
      Name: !Sub '${ProjectName}-${Environment}-collection-arn'

  VectorCollectionName:
    Description: 'Nombre de la colección vectorial'
    Value: !Ref VectorCollection
    Export:
      Name: !Sub '${ProjectName}-${Environment}-collection-name'

  BedrockKnowledgeBaseId:
    Description: 'ID de la base de conocimiento de Bedrock'
    Value: !Ref BedrockKnowledgeBase
    Export:
      Name: !Sub '${ProjectName}-${Environment}-kb-id'

  BedrockKnowledgeBaseArn:
    Description: 'ARN de la base de conocimiento de Bedrock'
    Value: !GetAtt BedrockKnowledgeBase.KnowledgeBaseArn
    Export:
      Name: !Sub '${ProjectName}-${Environment}-kb-arn'

  BedrockDataSourceId:
    Description: 'ID de la fuente de datos S3'
    Value: !Ref BedrockDataSource
    Export:
      Name: !Sub '${ProjectName}-${Environment}-datasource-id'

  DevOpsAgentRoleArn:
    Description: 'ARN del rol IAM para el agente DevOps'
    Value: !GetAtt DevOpsAgentRole.Arn
    Export:
      Name: !Sub '${ProjectName}-${Environment}-agent-role-arn'